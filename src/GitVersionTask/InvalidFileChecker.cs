using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using GitVersion;

public static class InvalidFileChecker
{
    private static readonly Dictionary<string, Func<string, string, bool>> versionAttributeFinders = new Dictionary<string, Func<string, string, bool>>()
    {
        { ".cs", CSharpFileContainsVersionAttribute },
        { ".vb", VisualBasicFileContainsVersionAttribute }
    };

    public static void CheckForInvalidFiles(IEnumerable<string> compileFiles, string projectFile)
    {
        foreach (var compileFile in GetInvalidFiles(compileFiles, projectFile))
        {
            throw new WarningException("File contains assembly version attributes which conflict with the attributes generated by GitVersion " + compileFile);
        }
    }

    private static bool FileContainsVersionAttribute(string compileFile, string projectFile)
    {
        var compileFileExtension = Path.GetExtension(compileFile);

        if (versionAttributeFinders.TryGetValue(compileFileExtension, out var languageSpecificFileContainsVersionAttribute))
        {
            return languageSpecificFileContainsVersionAttribute(compileFile, projectFile);
        }

        throw new WarningException("File with name containing AssemblyInfo could not be checked for assembly version attributes which conflict with the attributes generated by GitVersion " + compileFile);
    }

    private static bool CSharpFileContainsVersionAttribute(string compileFile, string projectFile)
    {
        var combine = Path.Combine(Path.GetDirectoryName(projectFile), compileFile);
        var allText = File.ReadAllText(combine);

        var blockComments = @"/\*(.*?)\*/";
        var lineComments = @"//(.*?)\r?\n";
        var strings = @"""((\\[^\n]|[^""\n])*)""";
        var verbatimStrings = @"@(""[^""]*"")+";

        var noCommentsOrStrings = Regex.Replace(allText,
            blockComments + "|" + lineComments + "|" + strings + "|" + verbatimStrings,
            me => me.Value.StartsWith("//") ? Environment.NewLine : "",
            RegexOptions.Singleline);

        return Regex.IsMatch(noCommentsOrStrings, @"(?x) # IgnorePatternWhitespace

\[\s*assembly\s*:\s*                    # The [assembly: part

(System\s*\.\s*Reflection\s*\.\s*)?     # The System.Reflection. part (optional)

Assembly(File|Informational)?Version    # The attribute AssemblyVersion, AssemblyFileVersion, or AssemblyInformationalVersion

\s*\(\s*\)\s*\]                         # End brackets ()]");
    }

    private static bool VisualBasicFileContainsVersionAttribute(string compileFile, string projectFile)
    {
        var combine = Path.Combine(Path.GetDirectoryName(projectFile), compileFile);
        var allText = File.ReadAllText(combine);

        var lineComments = @"'(.*?)\r?\n";
        var strings = @"""((\\[^\n]|[^""\n])*)""";

        var noCommentsOrStrings = Regex.Replace(allText,
            lineComments + "|" + strings,
            me => me.Value.StartsWith("'") ? Environment.NewLine : "",
            RegexOptions.Singleline);

        return Regex.IsMatch(noCommentsOrStrings, @"(?x) # IgnorePatternWhitespace

\<\s*Assembly\s*:\s*                    # The <Assembly: part

(System\s*\.\s*Reflection\s*\.\s*)?     # The System.Reflection. part (optional)

Assembly(File|Informational)?Version    # The attribute AssemblyVersion, AssemblyFileVersion, or AssemblyInformationalVersion

\s*\(\s*\)\s*\>                         # End brackets ()>");
    }

    private static IEnumerable<string> GetInvalidFiles(IEnumerable<string> compileFiles, string projectFile)
    {
        return compileFiles
            .Where(compileFile => compileFile.Contains("AssemblyInfo"))
            .Where(s => FileContainsVersionAttribute(s, projectFile));
    }
}
